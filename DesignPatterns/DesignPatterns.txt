Design Pattern:
* Design pattern is re-usable solution that can be applied to commonly occuring problems in software design.
* Design pattern can be thought of as templates for writing code.
* Different patterns are used to different problems. Some patterns like prototype pattern or factory pattern is used for object creation, module patten
  for code structuring and patterns like MVC(Model View Controller) is used for entire software design.
* Some of the common design patterns are:
	* Module Pattern
		* It helps to structure our code by breaking it into modules and managing it.
		* Javascript -
			* In ES6, modules were introduced which allows code to be broken into self contained modules separate files. It also allowed to export and import these modules,
			  but they are not supported in most browsers and we may need to use build tools like webpack and babel to convert them to ES5 code and execute
			  in the browsers.
			* IIFEs (immediately invoked function expression)(anonymous closures) or closures can be used for module pattern.
			* The module pattern is easy to use and creates encapsulation of our code. Using module pattern we can create private variables and functions and 
			  public variables and methods.
				var myModule = (function() {
					'use strict';
 
					var _privateProperty = 'Hello World'; // Private properties and method names usually start with _
     
					function _privateMethod() {
						console.log(_privateProperty);
					}
     
					return {
					publicMethod: function() {
						_privateMethod();
					}
				};
			 }());
  
			myModule.publicMethod();                    // outputs 'Hello World'   
			console.log(myModule._privateProperty);     // is undefined protected by the module closure
			myModule._privateMethod();                  // is TypeError protected by the module closure
	 * Revealing Module Pattern:
		* It is a variation of module Pattern
		* Using the return statement we can return a object literal that ‘reveals’ only the methods or properties we want to be publicly available.
		* The benefit to the Revealing Module Pattern is that we can look at the bottom of our modules and quickly see what is publicly available for use.
		eg:
			var myModule = (function() {
				'use strict';
 
				var _privateProperty = 'Hello World';
				var publicProperty = 'I am a public property';
  
				function _privateMethod() {
					console.log(_privateProperty);
				}
  
				function publicMethod() {
					_privateMethod();
				}
     
				return {
					publicMethod: publicMethod,
					publicProperty: publicProperty
				};
			}());
	* Singleton Pattern:
		* Single Pattern ensures a class has only one instance and provide a global point of access to it.
		* The Singleton Pattern limits the number of instances of a particular object to just one. This single instance is called the singleton.
		* Singletons are useful in situations where system-wide actions need to be coordinated from a single central place. An example is a database 
		  connection pool. The pool manages the creation, destruction, and lifetime of all database connections for the entire application ensuring 
		  that no connections are 'lost'.
		* Singletons reduce the need for global variables which is particularly important in JavaScript because it limits namespace pollution and
		  associated risk of name collisions.
			eg:
			var Singleton = (function () {
				var instance;
 
				function createInstance() {
					var object = new Object("I am the instance");
					return object;
				}
 
				return {
					getInstance: function () {
					if (!instance) {
						instance = createInstance();
					}
					return instance;
			   }
		};
		})();
 
		function run() {
 
			var instance1 = Singleton.getInstance();
			var instance2 = Singleton.getInstance();
 
			console.log(instance1 === instance2);//true  
		}
	* Factory Pattern
		* This pattern is mainly used for object creation. The Factory pattern is one of the fundamental creational patterns 
		* It should define an interface for creating an object, but let subclasses decide which class to instantiate. What it's
		 stating is that the Factory pattern takes care of creating objects without exposing the creation logic to the code that requires the object 
		 to be created.
		* This is very useful when we are creating slightly different objects with similar properties. This will also prevent users from issues in
		  changes in creation logic. Thus if few more properties are added in constructor, we need to change only objects using those properties and
		  already pre-defined objects need not change and this will be managed by factory interface.
		* Though factory pattern usually uses interface, ther are no inetrface in Javascript. Hence it uses regular methods:
		eg:
			function shapeFactory() {
				this.createShape = function (shapeType) {
				var shape;
 
				if (shapeType === 'rectangle') {
					shape = new Rectangle();
				} else if (shapeType === 'square') {
					shape = new Square();
				} else {
					shape = new Shape();
				}

				if (typeof shape.draw === 'undefined') {
					shape.draw = function () {
					// simple implementation
						console.log('This the default implementation, and the type is:', shapeType);
					}
				}
 
				return shape;
				}
			}
			var Shape = function () {};

			var Rectangle = function () {
				this.draw = function () {
					console.log('This is a Rectangle');
				}
			};
 
			var Square = function () {
				this.draw = function () {
					console.log('This is a Square');
				}
			};
			var factory = new shapeFactory();

			var rectangle = factory.createShape('rectangle');
			var square = factory.createShape('square');
			var triangle = factory.createShape('triangle');

			rectangle.draw();
			square.draw();
			triangle.draw(); // default implementation is called

	* Observer Pattern:
		* The Observer pattern offers a subscription model in which objects subscribe to an event and get notified when the event occurs. This pattern is the
 		 cornerstone of event driven programming, including JavaScript. The Observer pattern facilitates good object-oriented design and promotes loose 
		 coupling.
		* The instance (subject) maintains a collection of objects (observers) and notifies them all when changes to the state occurs
		* Angular JS relies heavily on this pattern.
		 eg:
		 // define a class
		class Observable {
			// each instance of the Observer class
			// starts with an empty array of things (observers)
			// that react to a state change
			constructor() {
				this.observers = [];
			}

			// add the ability to subscribe to a new object / DOM element
			// essentially, add something to the observers array
			subscribe(f) {
				this.observers.push(f);
			}

			// add the ability to unsubscribe from a particular object
			// essentially, remove something from the observers array
			unsubscribe(f) {
				this.observers = this.observers.filter(subscriber => subscriber !== f);
			}

			// update all subscribed objects / DOM elements
			// and pass some data to each of them
			notify(data) {
				this.observers.forEach(observer => observer(data));
			}
		}
		
		// some DOM references
		const input = document.querySelector('.js-input');
		const p1 = document.querySelector('.js-p1');
		const p2 = document.querySelector('.js-p2');
		
		const updateP1 = function(text) { p1.textContent = text};
		const updateP2 = text => p2.textContent = text;
		
		const headingsObserver = new Observable();
		headingsObserver.subscribe(updateP1);
		headingsObserver.subscribe(updateP2);
		
		// notify all observers about new data on event
		input.addEventListener('keyup', e => {
			headingsObserver.notify(e.target.value); // Thus the paras get updated with text content
		});
	* Mediator Pattern
		* The Mediator pattern provides central authority over a group of objects by encapsulating how these objects interact. 
		* It consists of a single mediator and many Colleagues. Colleagues do not iteract diectly, but interact via a mediator.
		* The Mediator patterns are useful in the development of complex forms. Take for example a page in which you enter options to make a flight 
		  reservation. A simple Mediator rule would be: you must enter a valid departure date, a valid return date, the return date must be after the 
		  departure date, a valid departure airport, a valid arrival airport, a valid number of travelers, and only then the Search button can be activated.
		  Mediator would validate before submitting the form.
		* Another example of Mediator is that of a control tower on an airport coordinating arrivals and departures of airplanes or Chatroom.

					
		var Participant = function(name) {
			this.name = name;
			this.chatroom = null;
		};
 
		Participant.prototype = {
			send: function(message, to) {
				this.chatroom.send(message, this, to);
			},
			receive: function(message, from) {
				console.log(from.name + " to " + this.name + ": " + message);
			}
		};
 
		var Chatroom = function() {
			var participants = {};
 
			return {
 
				register: function(participant) {
					participants[participant.name] = participant;
					participant.chatroom = this;
				},
 
				send: function(message, from, to) {
					if (to) {                      // single message
						to.receive(message, from);    
					} else {                       // broadcast message
						for (key in participants) {   
							if (participants[key] !== from) {
								participants[key].receive(message, from); // send to all except the sender
							}
						}
					}
				}
			};
		};
 
		/* colleagues */
		var yoko = new Participant("Yoko");
		var john = new Participant("John");
		var paul = new Participant("Paul");
		
		//Mediator
		var chatroom = new Chatroom();
		chatroom.register(yoko);
		chatroom.register(john);
		chatroom.register(paul);
		
		yoko.send("All you need is love.");
		yoko.send("I love you John."); 	// send to all collegues via mediator
		john.send("Hey, no need to broadcast", yoko); // send to particular colleague via mediator
	* State Pattern:
		* It is behavioural pattern
		* Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.
		* The State pattern provides state-specific logic to a limited set of objects in which each object represents a particular state. 
		* eg: Say a customer places an online order for a TV. While this order is being processed it can in one of many states: New, Approved, Packed, Pending, 
		  Hold, Shipping, Completed, or Canceled. If all goes well the sequence will be New, Approved, Packed, Shipped, and Completed. However, at any point 
		  something unpredictable may happen, such as no inventory, breakage, or customer cancelation. If that happens the order needs to be handled 
		  appropriately. Applying the State pattern to this scenario will provide you with 8 State objects, each with its own set of properties (state) 
		  and methods (i.e. the rules of acceptable state transitions). 
		* State machines are often implemented using the State pattern. These state machines simply have their State objects swapped out with another one when
		  a state transition takes place.
		  
		  eg: 
		  
		  var TrafficLight = function () {
			var count  = 0;
			var currentState = new Red(this);
 
			this.change = function (state) {
				// limits number of changes
				if (count++ >= 10) return;
				currentState = state;
				currentState.go();
			};
 
			this.start = function () {
				currentState.go();
			};
		}	
 
		var Red = function (light) {
			this.light = light;
 
			this.go = function () {
				console.log("Red --> for 1 minute");
				light.change(new Green(light));
			}
		};
 
		var Yellow = function (light) {
			this.light = light;
 
			this.go = function () {
				console.log("Yellow --> for 10 seconds");
				light.change(new Red(light));
			}
		};
 
		var Green = function (light) {
			this.light = light;
 
			this.go = function () {
				console.log("Green --> for 1 minute");
				light.change(new Yellow(light));
			}
		};

		var light = new TrafficLight();
		light.start();